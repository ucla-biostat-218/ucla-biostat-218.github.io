---
title: "Characterization"
subtitle: Biostat 218
author: "Marc A Suchard @ UCLA"
format:
  revealjs :
    width: 1280
    height: 720
    output-ext: revealjs.html
    footer: Biostat 218 - UCLA - Observational Health Data Sciences and Informatics (OHDSI)
    logo: figures/logo.png
    chalkboard: true
    highlight-style: a11y
    theme: [default, custom.sccs]
    code-line-numbers: false
  html:
    output-ext: html
    theme: cosmo
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
    highlight-style: a11y
    code-line-numbers: false
bibliography: "../ohdsi.bib"
csl: "apa.csl"
knitr:
  opts_chunk: 
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
    cache: false
    echo: true
---

## Introduction

In these lectures we will learn:

- How to perform disease natural history (characterization)

- About standardized characterization features

- Standardized incidence rate estimation

- Which OHDSI tools implement these processes

## Cohort characterization {.scrollable}

::: {.border}
![](figures/characteriztion_cartoon.png){width=70% fig-align="center"}
:::

$\ldots$ describes the baseline (and post-index) characteristics of people in a cohort

- Who gets the disease / outcome ?

Standardized OHDSI approaches provide statistics of **all** conditions, drug and device exposures, procedures and other clinical observations [generally before index-date and $\cal O$(10,000)]

## Example {.scrollable}

:::: {layout="[50,50]"}
::: {#first-column}
![](figures/characteristics1.png)
:::
::: {#second-column}
![](figures/characteristics2.png)
:::
::::

- Taken from a [comparative effectiveness study](https://www.thelancet.com/journals/landig/article/PIIS2589-7500(20)30289-2/fulltext)

## Using `FeatureExtraction`

Constructs covariates (often called _features_ or _characteristics_) in 3 ways

- Choose a default set of covariates (often sufficiently large to be highly correlated with any arbitrary feature)

- Choose from sets of pre-specified covariates

- Create a set of custom covariates

at (1) the person-level (for **machine learning**) or (2) aggregated / averaged (to describe the **population**)

## Default covariates {.scrollable}

```{r}
library(FeatureExtraction)
covariateSettings <- createDefaultCovariateSettings(
  excludedCovariateConceptIds = 1124300, # exclude diclofenac
  addDescendantsToExclude = TRUE         # and all descendants
)

covariateSettings
```

## Pre-specified covariates {.scrollable}

```{r}
covariateSettings <- createCovariateSettings(
  useDemographicsGender = TRUE,
  useDemographicsAgeGroup = TRUE,
  useConditionEraLongTerm = TRUE,  # `condition_occurrence` table
  useConditionEraShortTerm = TRUE,
  useDrugEraLongTerm = TRUE,       # `drug_exposure` table
  useDrugEraShortTerm = TRUE,
  longTermStartDays = -180,
  shortTermStartDays = -14,
  endDays = -1)      # exclude index-date
```

Many pre-specified sets have _default_ time-windows (related to index)

- **Long term**: 365 days prior up to and including cohort start date
- **Medium term**: 180 days prior up to and including cohort start date
- **Short term**: 30 days prior up and to including cohort start date

## Aggregrated covariates

::: {.callout-important}
Use `aggregated = TRUE` to return cohort-level summary statistics

- Saves time and space (depending in analysis)

- Can convert unaggregated data object into aggregated (if both are needed)
:::

```{r}
#| eval: false
covariateData2 <- aggregateCovariates(covariateData)
```

## Incidence rates {.scrollable}

![](figures/incidence_cartoon.png)

Characterization along with incidence rates (how often do people get the disease / outcome) are often of sufficient research interest alone to warrant publication

:::: {layout="[50,50]"}
::: {#first-column}
![](figures/bmj_rates.png)
:::
::: {#second-column}
- Incidence rate of drug initiation: centerpiece of a drug-utilization study (DUS)
:::
::::

## Incidence {.scrollable}

Incidence rates (and proportions) assess the occurrence of a new outcome (entry into outcome (O) cohort) in a population (in a target (T) cohort) during a **time-at-risk** (TAR)

![](figures/incidenceTimeline.png)

Two metrics:

$$
\text{Incidence proportion} = \frac{
\text{# persons in cohort with new outcome during TAR}
}{
\text{# persons in cohort with TAR}
}
$$

- Proportion of the population of interest that developed the outcome in a defined timeframe


$$
\text{Incidence rate} = \frac{
\text{# persons in cohort with new outcome during TAR}
}{
\text{person time at risk contributed by persons in cohort}
}
$$

- Number of outcomes during the cumulative TAR for the population. (individual contribution to TAR stops at outcome occurrence)

## Using `CohortIncidence`

- We want to compute the incidence of heart attacks (acute myocardial infarctions) among (newly diagnosed) hypertensive patients

- We need to define 2 cohorts: **AMI** and **hypertension**

- Then we will use `Capr`, `FeatureExtraction` and `CohortIncidence` packages to handle the hard-work

::: {.border}
![](figures/hades.png){width=50% fig-align="center"}
:::

## Cohorts {.scrollable}

```{r}
library(Capr)

# Hypertension
essentialHypertension <- cs(
  descendants(320128),
  name = "Essential hypertension"
)

sbp <- cs(3004249, name = "SBP")
dbp <- cs(3012888, name = "DBP")

hypertensionCohort <- cohort(
  entry = entry(                 # Entrance based on any of these
    conditionOccurrence(essentialHypertension),
    measurement(sbp, valueAsNumber(gte(130)), measurementUnit(8876)),
    measurement(dbp, valueAsNumber(gte(80)), measurementUnit(8876))
  ),
  exit = exit(
    endStrategy = observationExit()
  )
)

# Acute myocardial infarction
myocardialInfarction <- cs(
  descendants(4329847),
  exclude(descendants(314666)), # Old myocardial infarction
  name = "Myocardial infarction"
)
inpatientOrEr <- cs(
  descendants(9201),
  descendants(262),
  name = "Inpatient or ER"
)
amiCohort <- cohort(
  entry = entry(
    conditionOccurrence(myocardialInfarction),
    additionalCriteria = withAll(
      atLeast(1,
              visit(inpatientOrEr),
              aperture = duringInterval(eventStarts(-Inf, 0), eventEnds(0, Inf)))
    ),
    primaryCriteriaLimit = "All",
    qualifiedLimit = "All"
  ),
  attrition = attrition(
    "No prior AMI" = withAll(
      exactly(0,
              conditionOccurrence(myocardialInfarction),
              duringInterval(eventStarts(-365, -1)))
    )
  ),
  exit = exit(
    endStrategy = fixedExit(index = "startDate", offsetDays = 1)
  )
)
cohortDefinitionSet <- makeCohortSet(hypertensionCohort, amiCohort)

cohortDefinitionSet
```

::: {.callout-important}
- By default, cohort IDs are 1, 2, 3 ... 
- Often useful to renumber (to avoid conflicts in `cohort` table)
:::

## Cohort generation {.scrollable}

Use `CohortGenerator` ([link](https://ohdsi.github.io/CohortGenerator/)) to build the `cohort` tables and instantiate our cohorts

```{r}
#| output: false
connectionDetails <- DatabaseConnector::createConnectionDetails(
  dbms = "duckdb", 
  server = file.path(getwd(), "data", "synthetic.duckdb"))

cohortTableNames <- CohortGenerator::getCohortTableNames(
  cohortTable = "my_cohorts")

CohortGenerator::createCohortTables(
  connectionDetails = connectionDetails,
  cohortDatabaseSchema = "main",
  cohortTableNames = cohortTableNames)

cohortsGenerated <- CohortGenerator::generateCohortSet(
  connectionDetails = connectionDetails,
  cdmDatabaseSchema = "main",
  cohortDatabaseSchema = "main",
  cohortTableNames = cohortTableNames,
  cohortDefinitionSet = cohortDefinitionSet)
```

```{r}
CohortGenerator::getCohortCounts(
  connectionDetails = connectionDetails,
  cohortDatabaseSchema = "main",
  cohortTable = cohortTableNames$cohortTable
)
```

## Characterization computation {.scrollable}

Use `FeatureExtraction` ([link](https://ohdsi.github.io/FeatureExtraction/)) to characterize the population of patients experiencing an AMI

```{r}
#| output: false
covariateSettings <- createDefaultCovariateSettings()

covariateData <- getDbCovariateData(
  connectionDetails = connectionDetails,
  cdmDatabaseSchema = "main",
  cohortDatabaseSchema = "main",
  cohortTable = cohortTableNames$cohortTable,
  cohortIds = c(2),    # AMI
  rowIdField = "subject_id",
  covariateSettings = covariateSettings
)
```

```{r}
summary(covariateData)
```

## Structure of `covariateData` {.scrollable}

Person-level covariates can occupy up to 2GB of RAM, so this **design matrix** is held 

- In _sparse_ (row, column, value)-type format

- On disk via a temporary `Andromeda` object (SQLite or DuckDB back-end)

```{r}
head(covariateData$covariates) # main object
```

Permanently save to / load from disk

```{r}
#| eval: false
saveCovariateData(covariateData, "covariates")
covariateData <- loadCovariateData("covariates")
```

Aggregate via

```{r}
covariateData2 <- aggregateCovariates(covariateData)
summary(covariateData2)

head(covariateData2$covariatesContinuous)
```

## A simple Table 1 {.scrollable}

A default summary table is available in `FeatureExtraction`.

::: {.callout-important}
## Table specification is (relatively easy) to customize

- Make disease-specific
- Shorten to readibility
- `getDefaultTable1Specifications()`
:::

```{r}
result <- createTable1(
  covariateData1 = covariateData2
)

result
```

::: {.callout-important}
## Great packages in `R` to beautify tables

- `gt` : integrates well with `dplyr`
- `kableExtra` : powerful for latex
- `DT` : nicely interactive (html)
:::

## Incidence computation {.scrollable}

Use `CohortIncidence` ([link](https://ohdsi.github.io/CohortIncidence/)) to do the heavy-lifting

- Plenty of sublety (e.g. censoring TAR at event or observation end)

```{r}
#| output: false
# Target cohort is hypertension:
targetList <- list(CohortIncidence::createCohortRef(
  id = cohortDefinitionSet$cohortId[1],
  name = cohortDefinitionSet$cohortName[1]))

# Outcome cohort is AMI:
outcomeList <- list(CohortIncidence::createOutcomeDef(
  id = 1,
  name = cohortDefinitionSet$cohortName[2], 
  cohortId = cohortDefinitionSet$cohortId[2], 
  cleanWindow = 365))

# Specify the time-at-risk to coincide with the cohort start and end:
tars <- list(CohortIncidence::createTimeAtRiskDef(
  id = 1, 
  startWith = "start", 
  endWith = "end", 
  startOffset = 0,
  endOffset = 0))

# All together:
analysisList <- list(CohortIncidence::createIncidenceAnalysis(
  targets = cohortDefinitionSet$cohortId[1],
  outcomes = 1,
  tars = 1))

irDesign <- CohortIncidence::createIncidenceDesign(
  targetDefs = targetList,
  outcomeDefs = outcomeList,
  tars = tars,
  analysisList = analysisList,
  strataSettings = CohortIncidence::createStrataSettings(
    byYear = TRUE,
    byGender = TRUE,
    byAge = TRUE,
    ageBreaks = seq(0, 110, by = 10)
  )
)

buildOptions <- CohortIncidence::buildOptions(
  cohortTable = cohortTableNames$cohortTable,
  cdmDatabaseSchema = "main",
  sourceName = "synthetic",
  refId = 1)

executeResults <- CohortIncidence::executeAnalysis(
  connectionDetails = connectionDetails,
  incidenceDesign = irDesign,
  buildOptions = buildOptions)

```

## Preliminary results {.scrollable}

```{r}
#| layout: [[200]]
#| fig-width: 5
#| fig-height: 3
#| out-height: 15in
#| out-width: 9in
library(dplyr)
library(ggplot2)

results <- executeResults$incidence_summary
names(results) <- tolower(names(results))
results <- results %>% filter(is.na(start_year),
                              !is.na(gender_name),
                              !is.na(age_group_id))

ggplot(results, aes(x = age_group_id, 
                    y = incidence_rate_p100py,
                    group = gender_name, color = gender_name)) +
  geom_point() +
  xlab("Age group") +
  ylab("Incidence (per 100 patient year)")
```

## Quick review

- `FeatureExtraction` provides standardized natural disease histories
  * also delivers **design matrices** for prediction and causal inference
  
- `CohortIncidence` provides standardized incidence rate / proportion calculations
